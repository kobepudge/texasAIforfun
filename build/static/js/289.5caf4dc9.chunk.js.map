{"version":3,"file":"static/js/289.5caf4dc9.chunk.js","mappings":"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","sources":["services/gto-service.ts"],"sourcesContent":["// GTOÁøªÂâçÂÜ≥Á≠ñÊúçÂä°\n\nexport interface GTODecision {\n  action: 'fold' | 'call' | 'raise' | 'all_in' | 'limp';\n  amount: number;\n  frequency: number;\n  hand_tier: string;\n  stack_tier: 'short' | 'medium' | 'deep';\n  stack_bb: number;\n  scenario: string;\n  reasoning: string;\n}\n\nexport interface GTOQuery {\n  hand: string;\n  position: string;\n  facing_action?: string;\n  players_behind?: number;\n  stack_bb?: number;\n}\n\nexport interface GTOResponse {\n  success: boolean;\n  decision: GTODecision;\n  query: GTOQuery;\n  error?: string;\n}\n\nclass GTOService {\n  private baseUrl: string;\n  private cache: Map<string, GTODecision>;\n\n  constructor(baseUrl: string = 'http://localhost:3001') {\n    this.baseUrl = baseUrl;\n    this.cache = new Map();\n  }\n\n  // ÁîüÊàêÁºìÂ≠òÈîÆ\n  private generateCacheKey(query: GTOQuery): string {\n    const {\n      hand,\n      position,\n      facing_action = 'none',\n      players_behind = 0,\n      stack_bb = 100\n    } = query;\n    \n    return `${hand}_${position}_${facing_action}_${players_behind}_${stack_bb}`;\n  }\n\n  // Ëé∑ÂèñÁøªÂâçGTOÂÜ≥Á≠ñ (Â∏¶ÈáçËØïÊú∫Âà∂)\n  async getPreflopDecision(query: GTOQuery): Promise<GTODecision> {\n    const cacheKey = this.generateCacheKey(query);\n\n    // Ê£ÄÊü•ÁºìÂ≠ò\n    if (this.cache.has(cacheKey)) {\n      console.log(`‚ö° GTOÁºìÂ≠òÂëΩ‰∏≠: ${cacheKey}`);\n      return this.cache.get(cacheKey)!;\n    }\n\n    // ÈáçËØïÊú∫Âà∂\n    const maxRetries = 2;\n    let lastError: Error | null = null;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        console.log(`üîç GTOÊü•ËØ¢ (Â∞ùËØï ${attempt}/${maxRetries}): ${JSON.stringify(query)}`);\n\n        const params = new URLSearchParams({\n          hand: query.hand,\n          position: query.position,\n          facing_action: query.facing_action || 'none',\n          players_behind: (query.players_behind || 0).toString(),\n          stack_bb: (query.stack_bb || 100).toString()\n        });\n\n        const response = await fetch(`${this.baseUrl}/api/preflop-decision?${params}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          // Â¢ûÂä†Âà∞10ÁßíË∂ÖÊó∂\n          signal: AbortSignal.timeout(10000)\n        });\n\n        if (!response.ok) {\n          throw new Error(`GTO APIÈîôËØØ: ${response.status} ${response.statusText}`);\n        }\n\n        const data: GTOResponse = await response.json();\n\n        if (!data.success) {\n          throw new Error(data.error || 'GTOÂÜ≥Á≠ñÂ§±Ë¥•');\n        }\n\n        // ÁºìÂ≠òÁªìÊûú\n        this.cache.set(cacheKey, data.decision);\n\n        console.log(`‚úÖ GTOÂÜ≥Á≠ñ: ${data.decision.action} ${data.decision.amount || ''} (${data.decision.reasoning})`);\n\n        return data.decision;\n\n      } catch (error) {\n        lastError = error as Error;\n        console.warn(`‚ö†Ô∏è GTOÊúçÂä°Â∞ùËØï ${attempt} Â§±Ë¥•:`, error);\n\n        // Â¶ÇÊûú‰∏çÊòØÊúÄÂêé‰∏ÄÊ¨°Â∞ùËØïÔºåÁ≠âÂæÖ‰∏Ä‰∏ãÂÜçÈáçËØï\n        if (attempt < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n    }\n\n    console.error('‚ùå GTOÊúçÂä°ÊâÄÊúâÈáçËØïÈÉΩÂ§±Ë¥•:', lastError);\n\n    // ËøîÂõû‰øùÂÆàÁöÑÈªòËÆ§ÂÜ≥Á≠ñ\n    const fallbackDecision: GTODecision = {\n      action: 'fold',\n      amount: 0,\n      frequency: 1.0,\n      hand_tier: 'UNKNOWN',\n      stack_tier: 'medium',\n      stack_bb: query.stack_bb || 100,\n      scenario: 'fallback',\n      reasoning: 'GTOÊúçÂä°‰∏çÂèØÁî®Ôºå‰øùÂÆàÂºÉÁâå'\n    };\n\n    return fallbackDecision;\n  }\n\n  // Ê£ÄÊü•ÊòØÂê¶‰∏∫ÁøªÂâçÈò∂ÊÆµ\n  isPreflop(phase: string): boolean {\n    return phase === 'preflop';\n  }\n\n  // ËΩ¨Êç¢ÊâãÁâåÊ†ºÂºè\n  formatHoleCards(holeCards: Array<{rank: string, suit: string}>): string {\n    if (!holeCards || holeCards.length !== 2) {\n      return 'XX';\n    }\n\n    const [card1, card2] = holeCards;\n    const rank1 = card1.rank === '10' ? 'T' : card1.rank;\n    const rank2 = card2.rank === '10' ? 'T' : card2.rank;\n    \n    // Á°ÆÂÆöÊòØÂê¶ÂêåËä±\n    const suited = card1.suit === card2.suit;\n    \n    // ÊåâÂº∫Â∫¶ÊéíÂ∫è (A > K > Q > J > T > 9 > ... > 2)\n    const rankOrder = ['A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2'];\n    const rank1Index = rankOrder.indexOf(rank1);\n    const rank2Index = rankOrder.indexOf(rank2);\n    \n    let hand: string;\n    \n    if (rank1 === rank2) {\n      // ÂØπÂ≠ê\n      hand = `${rank1}${rank2}`;\n    } else if (rank1Index < rank2Index) {\n      // rank1Êõ¥Âº∫\n      hand = `${rank1}${rank2}${suited ? 's' : 'o'}`;\n    } else {\n      // rank2Êõ¥Âº∫\n      hand = `${rank2}${rank1}${suited ? 's' : 'o'}`;\n    }\n    \n    return hand;\n  }\n\n  // ËΩ¨Êç¢‰ΩçÁΩÆÊ†ºÂºè\n  formatPosition(playerIndex: number, totalPlayers: number, dealerIndex: number): string {\n    // ËÆ°ÁÆóÁõ∏ÂØπ‰∫éÂ∫ÑÂÆ∂ÁöÑ‰ΩçÁΩÆ\n    const relativePosition = (playerIndex - dealerIndex + totalPlayers) % totalPlayers;\n\n    // 9‰∫∫Ê°åÊ†áÂáÜ‰ΩçÁΩÆÈ°∫Â∫èÔºöÂ∫ÑÂÆ∂ÂºÄÂßãÈ°∫Êó∂Èíà\n    const positions = ['BTN', 'SB', 'BB', 'UTG', 'UTG+1', 'UTG+2', 'MP', 'MP+1', 'CO'];\n\n    // Ê†πÊçÆÁé©ÂÆ∂Êï∞ÈáèË∞ÉÊï¥‰ΩçÁΩÆÊò†Â∞Ñ\n    if (totalPlayers <= 6) {\n      const shortPositions = ['BTN', 'SB', 'BB', 'UTG', 'MP', 'CO'];\n      return shortPositions[relativePosition] || 'UTG';\n    }\n\n    console.log(`üîç GTO‰ΩçÁΩÆÊ†ºÂºèÂåñ: playerIndex=${playerIndex}, dealerIndex=${dealerIndex}, relativePosition=${relativePosition}, ‰ΩçÁΩÆ=${positions[relativePosition]}`);\n\n    return positions[relativePosition] || 'UTG';\n  }\n\n  // ËÆ°ÁÆóÁ≠πÁ†ÅÊ∑±Â∫¶ (‰ª•Â§ßÁõ≤‰∏∫Âçï‰Ωç)\n  calculateStackDepth(chips: number, bigBlind: number): number {\n    return Math.round(chips / bigBlind);\n  }\n\n  // ÂàÜÊûêÈù¢ÂØπÁöÑË°åÂä®\n  analyzeFacingAction(gameState: any, currentPlayerId?: string): string {\n    console.log('üîç ÂàÜÊûêË°åÂä®ÂéÜÂè≤:', {\n      actionHistory: gameState.actionHistory,\n      phase: gameState.phase,\n      currentBet: gameState.currentBet,\n      bigBlind: gameState.bigBlindAmount,\n      currentPlayerId\n    });\n\n    // ÁøªÂâçÁâπÊÆäÂ§ÑÁêÜ\n    if (gameState.phase === 'preflop') {\n      return this.analyzePreflopAction(gameState, currentPlayerId);\n    }\n\n    // ÁøªÂêéÂ§ÑÁêÜ\n    if (!gameState.actionHistory || gameState.actionHistory.length === 0) {\n      return 'none';\n    }\n\n    // Êü•ÊâæÂΩìÂâçËΩÆÊ¨°ÁöÑË°åÂä®\n    const currentRoundActions = gameState.actionHistory.filter(\n      (action: any) => action.phase === gameState.phase\n    );\n\n    if (currentRoundActions.length === 0) {\n      return 'none';\n    }\n\n    // ÂàÜÊûêÊúÄÂêéÁöÑÊúâÊïàË°åÂä®ÔºàÊéíÈô§ÂºÉÁâåÔºâ\n    const validActions = currentRoundActions.filter(\n      (action: any) => action.action !== 'fold'\n    );\n\n    if (validActions.length === 0) {\n      return 'none';\n    }\n\n    const lastAction = validActions[validActions.length - 1];\n\n    if (lastAction.action === 'raise') {\n      const raiseSize = lastAction.amount / (gameState.bigBlindAmount || 100);\n      if (raiseSize <= 2.5) return 'raise_2bb';\n      if (raiseSize <= 3.5) return 'raise_3bb';\n      if (raiseSize <= 4.5) return 'raise_4bb';\n      return '3bet';\n    }\n\n    if (lastAction.action === 'call') {\n      return 'limp';\n    }\n\n    return 'none';\n  }\n\n  // ÁøªÂâçË°åÂä®ÂàÜÊûê\n  private analyzePreflopAction(gameState: any, currentPlayerId?: string): string {\n    const bigBlind = gameState.bigBlindAmount || 100;\n    const currentBet = gameState.currentBet || 0;\n\n    console.log('üîç ÁøªÂâçË°åÂä®ÂàÜÊûê:', {\n      currentBet,\n      bigBlind,\n      ratio: currentBet / bigBlind,\n      actionHistory: gameState.actionHistory,\n      currentPlayerId\n    });\n\n    // Ëé∑ÂèñÁøªÂâçË°åÂä®Â∫èÂàó\n    const preflopActions = gameState.actionHistory?.filter(\n      (action: any) => action.phase === 'preflop'\n    ) || [];\n\n    // ËøáÊª§Âá∫ÊúâÊïàË°åÂä®ÔºàÊéíÈô§ÂºÉÁâåÔºâ\n    const validActions = preflopActions.filter(\n      (action: any) => action.action !== 'fold'\n    );\n\n    console.log('üîç ÊúâÊïàÁøªÂâçË°åÂä®:', validActions);\n\n    // Â¶ÇÊûúÂΩìÂâç‰∏ãÊ≥®‰∏∫0ÊàñÁ≠â‰∫éÂ§ßÁõ≤Ôºå‰∏îÊ≤°ÊúâÊúâÊïàË°åÂä®ÔºåËØ¥ÊòéÊó†‰∫∫Ë°åÂä®\n    if (currentBet <= bigBlind && validActions.length === 0) {\n      return 'none';\n    }\n\n    // Â¶ÇÊûúÂΩìÂâç‰∏ãÊ≥®Á≠â‰∫éÂ§ßÁõ≤ÔºåÊ£ÄÊü•ÊòØÂê¶ÊúâË∑õÂÖ•\n    if (currentBet === bigBlind) {\n      const callActions = validActions.filter(action => action.action === 'call');\n      if (callActions.length > 0) {\n        // üéØ ÂÖ≥ÈîÆ‰øÆÂ§çÔºöÊ£ÄÊü•ÂΩìÂâçÁé©ÂÆ∂ÊòØÂê¶‰∏∫BB\n        const currentPlayer = gameState.players?.find((p: any) => p.id === currentPlayerId);\n        if (currentPlayer) {\n          const position = this.formatPosition(\n            currentPlayer.position,\n            gameState.players.length,\n            gameState.dealerIndex\n          );\n\n          // Â¶ÇÊûúÂΩìÂâçÁé©ÂÆ∂ÊòØBBÔºå‰∏îÂè™ÊúâË∑õÂÖ•Ê≤°ÊúâÂä†Ê≥®ÔºåÂàôfacing_action‰∏∫none\n          if (position === 'BB') {\n            console.log('üéØ BB‰ΩçÁΩÆÈù¢ÂØπË∑õÂÖ•ÔºåÂèØ‰ª•ÂÖçË¥πÁúãÁøªÁâåÔºåfacing_action=none');\n            return 'none';\n          }\n        }\n\n        return 'limp';\n      }\n      return 'none'; // Âè™ÊúâÁõ≤Ê≥®ÔºåÊó†‰∫∫Ë°åÂä®\n    }\n\n    // ÂàÜÊûêÂä†Ê≥®Â∫èÂàó\n    const raiseActions = validActions.filter(action => action.action === 'raise');\n\n    if (raiseActions.length === 0) {\n      return 'none';\n    }\n\n    // ÂàÜÊûêÂä†Ê≥®Â§ßÂ∞è\n    const raiseRatio = currentBet / bigBlind;\n\n    // Âà§Êñ≠ÊòØÂê¶‰∏∫3betÊàñÊõ¥È´ò\n    if (raiseActions.length >= 2) {\n      if (raiseActions.length >= 3) {\n        return '4bet';\n      }\n      return '3bet';\n    }\n\n    // È¶ñÊ¨°Âä†Ê≥®ÔºåÊ†πÊçÆÂ§ßÂ∞èÂàÜÁ±ª\n    if (raiseRatio <= 2.5) {\n      return 'raise_2bb';\n    } else if (raiseRatio <= 3.5) {\n      return 'raise_3bb';\n    } else if (raiseRatio <= 4.5) {\n      return 'raise_4bb';\n    } else {\n      return 'raise_4bb'; // Â§ß‰∫é4BBÁöÑÈ¶ñÊ¨°Âä†Ê≥®\n    }\n  }\n\n  // ËÆ°ÁÆóÂêéÈù¢ËøòÊ≤°Ë°åÂä®ÁöÑÁé©ÂÆ∂Êï∞Èáè\n  calculatePlayersBehind(gameState: any, currentPlayerId: string): number {\n    if (!gameState.players || !gameState.actionHistory) {\n      return 0;\n    }\n\n    // ÊâæÂà∞ÂΩìÂâçÁé©ÂÆ∂ÁöÑ‰ΩçÁΩÆ\n    const currentPlayerIndex = gameState.players.findIndex((p: any) => p.id === currentPlayerId);\n    if (currentPlayerIndex === -1) {\n      return 0;\n    }\n\n    // Ëé∑ÂèñÁøªÂâçÂ∑≤ÁªèË°åÂä®ÁöÑÁé©ÂÆ∂ID\n    const preflopActions = gameState.actionHistory.filter(\n      (action: any) => action.phase === 'preflop'\n    );\n    const actedPlayerIds = new Set(preflopActions.map((action: any) => action.playerId));\n\n    // ËÆ°ÁÆóÂΩìÂâçÁé©ÂÆ∂ÂêéÈù¢ËøòÊ≤°Ë°åÂä®ÁöÑÊ¥ªË∑ÉÁé©ÂÆ∂Êï∞Èáè\n    let playersBehind = 0;\n    const totalPlayers = gameState.players.length;\n\n    for (let i = 1; i < totalPlayers; i++) {\n      const nextPlayerIndex = (currentPlayerIndex + i) % totalPlayers;\n      const nextPlayer = gameState.players[nextPlayerIndex];\n\n      // Â¶ÇÊûúÁé©ÂÆ∂ËøòÊ¥ªË∑É‰∏îËøòÊ≤°Ë°åÂä®ÔºåËÆ°ÂÖ•\n      if (nextPlayer.isActive && !actedPlayerIds.has(nextPlayer.id)) {\n        playersBehind++;\n      }\n    }\n\n    console.log(`üîç ËÆ°ÁÆóÂêéÈù¢Áé©ÂÆ∂: ÂΩìÂâçÁé©ÂÆ∂${currentPlayerId}, ÂêéÈù¢ËøòÊúâ${playersBehind}‰∏™Áé©ÂÆ∂Êú™Ë°åÂä®`);\n\n    return playersBehind;\n  }\n\n  // ÂÅ•Â∫∑Ê£ÄÊü•\n  async healthCheck(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/health`, {\n        signal: AbortSignal.timeout(3000)\n      });\n      return response.ok;\n    } catch {\n      return false;\n    }\n  }\n\n  // Ê∏ÖÁ©∫ÁºìÂ≠ò\n  clearCache(): void {\n    this.cache.clear();\n    console.log('üóëÔ∏è GTOÁºìÂ≠òÂ∑≤Ê∏ÖÁ©∫');\n  }\n\n  // Ëé∑ÂèñÁºìÂ≠òÁªüËÆ°\n  getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys())\n    };\n  }\n}\n\n// ÂàõÂª∫ÂÖ®Â±ÄÂÆû‰æã\nexport const gtoService = new GTOService();\n\n// ÂØºÂá∫Á±ªÂûãÂíåÊúçÂä°\nexport default GTOService;\n"],"names":["GTOService","constructor","baseUrl","arguments","length","undefined","cache","this","Map","generateCacheKey","query","hand","position","facing_action","players_behind","stack_bb","getPreflopDecision","cacheKey","has","console","log","get","lastError","attempt","JSON","stringify","params","URLSearchParams","toString","response","fetch","method","headers","signal","AbortSignal","timeout","ok","Error","status","statusText","data","json","success","error","set","decision","action","amount","reasoning","warn","Promise","resolve","setTimeout","frequency","hand_tier","stack_tier","scenario","isPreflop","phase","formatHoleCards","holeCards","card1","card2","rank1","rank","rank2","suited","suit","rankOrder","rank1Index","indexOf","rank2Index","formatPosition","playerIndex","totalPlayers","dealerIndex","relativePosition","positions","calculateStackDepth","chips","bigBlind","Math","round","analyzeFacingAction","gameState","currentPlayerId","actionHistory","currentBet","bigBlindAmount","analyzePreflopAction","currentRoundActions","filter","validActions","lastAction","raiseSize","_gameState$actionHist","ratio","_gameState$players","currentPlayer","players","find","p","id","raiseActions","raiseRatio","calculatePlayersBehind","currentPlayerIndex","findIndex","preflopActions","actedPlayerIds","Set","map","playerId","playersBehind","i","nextPlayerIndex","nextPlayer","isActive","healthCheck","clearCache","clear","getCacheStats","size","keys","Array","from","gtoService"],"sourceRoot":""}