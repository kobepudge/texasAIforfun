import { NewGameState } from '../core/game-engine';
import { Card } from '../types/poker';

// üìä Â§çÊùÇÂ∫¶ËØÑ‰º∞ÁªìÊûú
export interface ComplexityAssessment {
    totalScore: number;        // ÊÄªÂ§çÊùÇÂ∫¶ÂàÜÊï∞ (0-100)
    category: 'simple' | 'medium' | 'complex' | 'extreme';
    factors: {
      handStrengthAmbiguity: number;    // ÁâåÂäõÊ®°Á≥äÂ∫¶ (0-25)
      opponentRangeWidth: number;       // ÂØπÊâãËåÉÂõ¥ÂÆΩÂ∫¶ (0-25) 
      actionSequenceComplexity: number; // Ë°åÂä®Â∫èÂàóÂ§çÊùÇÂ∫¶ (0-25)
      stackAndPotDynamics: number;      // Á≠πÁ†ÅÂíåÂ∫ïÊ±†Âä®ÊÄÅ (0-25)
    };
    recommendedTimeout: number;         // Êé®ËçêË∂ÖÊó∂Êó∂Èó¥(ms)
    recommendedTemperature: number;     // Êé®ËçêAIÊ∏©Â∫¶
    promptType: 'minimal' | 'standard' | 'detailed' | 'comprehensive';
  }

// üéØ Â±ÄÂäøÂ§çÊùÇÂ∫¶ÂàÜÊûêÂô®
export class SituationComplexityAnalyzer {

  // üéØ ‰∏ªË¶ÅÂàÜÊûêÂÖ•Âè£
  analyzeSituation(
    gameState: NewGameState,
    playerId: string,
    holeCards: Card[]
  ): ComplexityAssessment {

    // üöÄ Ë∞ÉËØïÔºöÊ£ÄÊü•gameState.phase
    console.log('üîç SituationComplexityAnalyzerÊî∂Âà∞ÁöÑgameState:', {
      phase: gameState.phase,
      phaseType: typeof gameState.phase,
      gameStateKeys: Object.keys(gameState),
      hasPhase: 'phase' in gameState,
      gameStateStructure: {
        gameId: gameState.gameId,
        phase: gameState.phase,
        players: gameState.players?.length,
        pot: gameState.pot
      }
    });

    // ÁÆÄÂåñÂÆûÁé∞ÔºöÂü∫‰∫éÊ∏∏ÊàèÈò∂ÊÆµÁöÑÂü∫Á°ÄÂ§çÊùÇÂ∫¶ËØÑ‰º∞
    let baseScore = 0;

    // Ê†πÊçÆÊ∏∏ÊàèÈò∂ÊÆµËÆæÁΩÆÂü∫Á°ÄÂàÜÊï∞
    switch (gameState.phase) {
      case 'preflop':
        baseScore = 20; // ÁøªÂâçÁõ∏ÂØπÁÆÄÂçï
        break;
      case 'flop':
        baseScore = 35; // ÁøªÁâå‰∏≠Á≠âÂ§çÊùÇ
        break;
      case 'turn':
        baseScore = 50; // ËΩ¨ÁâåËæÉÂ§çÊùÇ
        break;
      case 'river':
        baseScore = 65; // Ê≤≥ÁâåÊúÄÂ§çÊùÇ
        break;
      default:
        baseScore = 30;
    }

    // Ê†πÊçÆÂ∫ïÊ±†Â§ßÂ∞èË∞ÉÊï¥
    const pot = gameState.pot || 0;
    const bigBlind = gameState.bigBlind || 100;
    const potBBs = pot / bigBlind;

    if (potBBs > 20) baseScore += 15; // Â§ßÂ∫ïÊ±†Â¢ûÂä†Â§çÊùÇÂ∫¶
    else if (potBBs > 10) baseScore += 8;
    else if (potBBs > 5) baseScore += 3;

    // Ê†πÊçÆÂØπÊâãÊï∞ÈáèË∞ÉÊï¥
    const activeOpponents = gameState.players.filter(p => p.isActive && p.id !== playerId).length;
    if (activeOpponents >= 3) baseScore += 10; // Â§ö‰∫∫Â∫ïÊ±†
    else if (activeOpponents >= 2) baseScore += 5;

    const totalScore = Math.min(baseScore, 100);

    const factors = {
      handStrengthAmbiguity: Math.floor(totalScore * 0.3),
      opponentRangeWidth: Math.floor(totalScore * 0.25),
      actionSequenceComplexity: Math.floor(totalScore * 0.25),
      stackAndPotDynamics: Math.floor(totalScore * 0.2)
    };

    return {
      totalScore,
      category: this.categorizeComplexity(totalScore),
      factors,
      recommendedTimeout: this.getRecommendedTimeout(totalScore),
      recommendedTemperature: this.getRecommendedTemperature(totalScore),
      promptType: this.getPromptType(totalScore)
    };
  }

  // üè∑Ô∏è Â§çÊùÇÂ∫¶ÂàÜÁ±ª
  private categorizeComplexity(score: number): 'simple' | 'medium' | 'complex' | 'extreme' {
    if (score <= 25) return 'simple';
    if (score <= 50) return 'medium';
    if (score <= 75) return 'complex';
    return 'extreme';
  }

  // ‚è±Ô∏è Êé®ËçêË∂ÖÊó∂Êó∂Èó¥ (‰∏¥Êó∂ÊîæÂÆΩÈôêÂà∂Á°Æ‰øùÁ®≥ÂÆöÊÄß)
  private getRecommendedTimeout(score: number): number {
    if (score <= 25) return 15000;  // 15Áßí - ÁÆÄÂçïÂ±ÄÂäø
    if (score <= 50) return 25000;  // 25Áßí - ‰∏≠Á≠âÂ§çÊùÇÂ∫¶
    if (score <= 75) return 35000;  // 35Áßí - Â§çÊùÇÂ±ÄÂäø
    return 45000; // 45Áßí - ÊûÅÂ§çÊùÇÂ±ÄÂäø
  }

  // üå°Ô∏è Êé®ËçêAIÊ∏©Â∫¶
  private getRecommendedTemperature(score: number): number {
    if (score <= 25) return 0.1;   // ÁÆÄÂçïÂ±ÄÂäøÔºå‰ΩéÊ∏©Â∫¶
    if (score <= 50) return 0.3;   // ‰∏≠Á≠âÂ§çÊùÇÔºå‰∏≠Á≠âÊ∏©Â∫¶
    if (score <= 75) return 0.5;   // Â§çÊùÇÂ±ÄÂäøÔºåËæÉÈ´òÊ∏©Â∫¶
    return 0.7; // ÊûÅÂ§çÊùÇÔºåÈ´òÊ∏©Â∫¶‰øùÊåÅÂàõÈÄ†ÊÄß
  }

  // üìù Êé®ËçêPromptÁ±ªÂûã
  private getPromptType(score: number): 'minimal' | 'standard' | 'detailed' | 'comprehensive' {
    if (score <= 25) return 'minimal';
    if (score <= 50) return 'standard';
    if (score <= 75) return 'detailed';
    return 'comprehensive';
  }
}
